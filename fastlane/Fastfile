fastlane_version "1.33.1"

default_platform :ios

require 'faraday'
Faraday::Utils.default_params_encoder = Faraday::FlatParamsEncoder

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    increment_build_number

    # xctool # run the tests of your app
  end

  lane :refresh_dsyms do
    download_dsyms                  # Download dSYM files from iTC
    upload_symbols_to_crashlytics(api_token: '67ffdb78ce9cd50af8404c244fa25df01ea2b5bc')   # Upload them to Crashlytics
    clean_build_artifacts           # Delete the local dSYM files
  end

  desc "Submit a new Beta Build to Fabric"
  lane :fabric_staging do
    increment_build_number
    #increment_version_number(
    #  bump_type: "patch" # Automatically increment patch version number
    #)
    ENV["PROFILE_UDID"] = lane_context[SharedValues::SIGH_UDID]
    gym(scheme: "SwiftProject Staging", use_legacy_build_api: true)
    crashlytics(
      crashlytics_path: './Pods/Crashlytics',
      api_token: '67ffdb78ce9cd50af8404c244fa25df01ea2b5bc',
      build_secret: '20cddd5b881ce36bfe855addd58d8d01aa2755c9bfa2c91515de7457a65d8d82'
    )
  end

  desc "Submit a new Beta Build to Fabric"
  lane :fabric_production do
    increment_build_number
    #increment_version_number(
    #  bump_type: "patch" # Automatically increment patch version number
    #)
    ENV["PROFILE_UDID"] = lane_context[SharedValues::SIGH_UDID]
    gym(scheme: "SwiftProject Pre-Production", use_legacy_build_api: true)
    crashlytics(
      crashlytics_path: './Pods/Crashlytics',
      api_token: '67ffdb78ce9cd50af8404c244fa25df01ea2b5bc',
      build_secret: '20cddd5b881ce36bfe855addd58d8d01aa2755c9bfa2c91515de7457a65d8d82'
    )
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    ENV["PROFILE_UDID"] = lane_context[SharedValues::SIGH_UDID]
    sigh(force: true)

    gym(
      scheme: "SwiftProject Production",
      clean: true,
      silent: true,
      include_symbols: true,
      verbose: true,
      use_legacy_build_api: true
    )

    deliver
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    sh "terminal-notifier -message \"#{exception.message}\""
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
